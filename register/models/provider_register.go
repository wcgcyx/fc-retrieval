// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProviderRegister Register entry
//
// swagger:model ProviderRegister
type ProviderRegister struct {

	// RootKey is the provider's public key,
	// and can be used to derive the filecoin wallet address for payment.
	// It is a 65 bytes hex string.
	RootKey string `json:"root_key,omitempty"`

	// NodeIDD is derived from the root key, it is set by the smart contract.
	// It is a 32 bytes hex string.
	NodeID string `json:"node_id,omitempty"`

	// MsgSigningKey is the message signing public key.
	// It is a 65 bytes hex string.
	// This can be updated via smart contract.
	MsgSigningKey string `json:"msg_signing_key,omitempty"`

	// MsgSigningKeyVer is the message signing public key version.
	// This can be updated via smart contract.
	MsgSigningKeyVer byte `json:"msg_signing_key_ver,omitempty"`

	// OfferSigningKey is the offer signing public key.
	// It is a 65 bytes hex string.
	OfferSigningKey string `json:"offer_signing_key,omitempty"`

	// RegionCode is the region code of this provider.
	// It is a ISO 3166-1 alpha-2 string.
	RegionCode string `json:"region_code,omitempty"`

	// NetworkAddr is the network address of this provider.
	// It should be a valid libp2p address.
	NetworkAddr string `json:"network_addr,omitempty"`

	// Deregistering indicates whether or not this provider is in the middle of deregistering itself.
	// It is set by the smart contract.
	Deregistering bool `json:"deregistering,omitempty"`

	// DeregisteringHeight is the height of the block which contains the deregistering transaction.
	// It is set by the smart contract.
	DeregisteringHeight uint64 `json:"deregistering_height,omitempty"`
}

// Validate validates this provider register
func (m *ProviderRegister) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this provider register based on context it is used
func (m *ProviderRegister) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProviderRegister) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProviderRegister) UnmarshalBinary(b []byte) error {
	var res ProviderRegister
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
